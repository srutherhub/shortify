// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: urls.sql

package dbsqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteExpiredUrl = `-- name: DeleteExpiredUrl :exec
DELETE FROM urls WHERE id = $1 AND base_route IN (SELECT route_id
  FROM routes
  WHERE route_name = $2)
`

type DeleteExpiredUrlParams struct {
	ID        string
	RouteName string
}

func (q *Queries) DeleteExpiredUrl(ctx context.Context, arg DeleteExpiredUrlParams) error {
	_, err := q.db.Exec(ctx, deleteExpiredUrl, arg.ID, arg.RouteName)
	return err
}

const getUrlFromID = `-- name: GetUrlFromID :one
SELECT urls.url, routes.route_name, urls.created_at, urls.expires_at
FROM urls INNER JOIN routes on urls.base_route = routes.route_id
WHERE urls.id = $1
`

type GetUrlFromIDRow struct {
	Url       string
	RouteName string
	CreatedAt int64
	ExpiresAt pgtype.Int8
}

func (q *Queries) GetUrlFromID(ctx context.Context, id string) (GetUrlFromIDRow, error) {
	row := q.db.QueryRow(ctx, getUrlFromID, id)
	var i GetUrlFromIDRow
	err := row.Scan(
		&i.Url,
		&i.RouteName,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getUserUrls = `-- name: GetUserUrls :many
SELECT urls.id, urls.url, routes.route_name , urls.created_at, urls.expires_at, urls.utm_source, urls.utm_medium, urls.utm_campaign, urls.utm_term, urls.utm_content
FROM urls
  INNER JOIN routes ON urls.base_route = routes.route_id
WHERE urls.username = $1
`

type GetUserUrlsRow struct {
	ID          string
	Url         string
	RouteName   string
	CreatedAt   int64
	ExpiresAt   pgtype.Int8
	UtmSource   pgtype.Text
	UtmMedium   pgtype.Text
	UtmCampaign pgtype.Text
	UtmTerm     pgtype.Text
	UtmContent  pgtype.Text
}

func (q *Queries) GetUserUrls(ctx context.Context, username string) ([]GetUserUrlsRow, error) {
	rows, err := q.db.Query(ctx, getUserUrls, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserUrlsRow
	for rows.Next() {
		var i GetUserUrlsRow
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.RouteName,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.UtmSource,
			&i.UtmMedium,
			&i.UtmCampaign,
			&i.UtmTerm,
			&i.UtmContent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementUrlClickCount = `-- name: IncrementUrlClickCount :exec
UPDATE urls SET click_count = click_count + 1 WHERE id = $1
`

func (q *Queries) IncrementUrlClickCount(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, incrementUrlClickCount, id)
	return err
}

const insertNewUrl = `-- name: InsertNewUrl :exec
INSERT INTO urls
  (id,url,created_at,expires_at,utm_source,utm_medium,utm_campaign,utm_term,utm_content,username)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
`

type InsertNewUrlParams struct {
	ID          string
	Url         string
	CreatedAt   int64
	ExpiresAt   pgtype.Int8
	UtmSource   pgtype.Text
	UtmMedium   pgtype.Text
	UtmCampaign pgtype.Text
	UtmTerm     pgtype.Text
	UtmContent  pgtype.Text
	Username    string
}

func (q *Queries) InsertNewUrl(ctx context.Context, arg InsertNewUrlParams) error {
	_, err := q.db.Exec(ctx, insertNewUrl,
		arg.ID,
		arg.Url,
		arg.CreatedAt,
		arg.ExpiresAt,
		arg.UtmSource,
		arg.UtmMedium,
		arg.UtmCampaign,
		arg.UtmTerm,
		arg.UtmContent,
		arg.Username,
	)
	return err
}
